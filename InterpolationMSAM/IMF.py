import torch
import numpy as np
import scipy.interpolate as inter
# from scipy.interpolate import interp1d
from torch.autograd.function import Function
# import torch.nn.Function as Function
import scipy.io
import os
os.environ['CUDA_VISIBLE_DEVICES'] = '1'
device0 = torch.device("cuda:1")

pvRGB=np.array([0.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])

# eiR=np.array([-4.60897595851398,-4.44261505824519,-4.27625415797640,-4.11031873307490,-3.94570978280036,-3.78466627678152,-3.62976715582244,-3.48223674014823,-3.34393170998760,-3.21685731637898,-3.10114562213889,-2.99616670750299,-2.90027548225838,-2.81193044574807,-2.72961908515721,-2.65203924296971,-2.57866988924081,-2.50928114130295,-2.44318288891389,-2.37894146523481,-2.31708464395815,-2.25750148152106,-2.20065745311375,-2.14673301736695,-2.09584837798619,-2.04751081711814,-2.00125847647178,-1.95677644071584,-1.91382728971894,-1.87204560164403,-1.83098187180781,-1.79041389712207,-1.75031691807746,-1.71119854258823,-1.67327571119883,-1.63646047053842,-1.60079584509685,-1.56641898652823,-1.53339604295337,-1.50163330992992,-1.47121058940617,-1.44203772366012,-1.41400935185669,-1.38707777806900,-1.36120447759219,-1.33664205593027,-1.31324377454356,-1.29068105378602,-1.26857221987297,-1.24677317405053,-1.22504940027038,-1.20331093691534,-1.18143888577733,-1.15949089844388,-1.13772253607426,-1.11621654049907,-1.09487854105512,-1.07369840968095,-1.05289794882178,-1.03243133915251,-1.01242801947256,-0.992689596106576,-0.973167947420254,-0.953767103375203,-0.934511569022242,-0.915483367273507,-0.896787829951197,-0.878596716605671,-0.860992644114369,-0.843836618208148,-0.826986862467908,-0.810309608447581,-0.793796349871704,-0.777348202239627,-0.760735985019931,-0.744225414457437,-0.727980420925437,-0.712018197675744,-0.696425068202627,-0.681042939230658,-0.665904823560186,-0.650974354383688,-0.636345029471826,-0.621954393637612,-0.607706369921047,-0.593579365186726,-0.579575799623437,-0.565705452550064,-0.551920632173318,-0.538154501685678,-0.524103932876240,-0.509905715491923,-0.495708257763881,-0.481673541142673,-0.467842392575073,-0.454163717851552,-0.440578752229117,-0.427075008018367,-0.413604108561944,-0.400007282504932,-0.386325987558215,-0.372649202106165,-0.359036068855339,-0.345530321824268,-0.332134316866945,-0.318732641475708,-0.305163986658959,-0.291314011857427,-0.277123355627258,-0.262630095244016,-0.247881978916098,-0.233043660218508,-0.218144871846455,-0.203220704033797,-0.188244381964806,-0.173073036572927,-0.157780846986749,-0.142514357424179,-0.127469405243653,-0.112760613147719,-0.0984205494182236,-0.0845752293496749,-0.0713191772588375,-0.0586185773730598,-0.0463904911612453,-0.0345418242503274,-0.0229382167680447,-0.0114777761054825,2.47539031600192e-11,0.0114904441237731,0.0229155336259447,0.0342039550549366,0.0453239698164861,0.0562384671881331,0.0669975642780845,0.0777715477543576,0.0887147250317295,0.100021864003575,0.111691141114278,0.123694963294393,0.135991183903885,0.148460646913939,0.161088005276361,0.173829155379191,0.186657483151993,0.199539782030789,0.212405471341970,0.225211111826968,0.237929758307663,0.250454726360768,0.262747125546681,0.274663775344056,0.286279184244775,0.297641119370004,0.308843539364446,0.319953795596477,0.331098856741447,0.342338942589014,0.353795488036794,0.365448562664990,0.377306720753661,0.389308743570036,0.401407752272541,0.413531456728663,0.425617446456834,0.437705179013432,0.449706494115637,0.461619078101067,0.473610829383005,0.485822718507645,0.498465671920787,0.511516537598820,0.524954366086378,0.538694528684349,0.552567366227562,0.566567640164075,0.580628740693964,0.594613394046810,0.608348382426803,0.621853549669488,0.635200148574521,0.648564509950640,0.662196974062545,0.676409789659937,0.691088335231617,0.706061783037029,0.721112483737709,0.736168325558228,0.751006361624735,0.765771960787502,0.780563641009873,0.795421628783447,0.810244131432161,0.824928325743739,0.839479795478550,0.854042768324839,0.868477564475231,0.882574851344219,0.896166958028938,0.909112815127748,0.921741568514612,0.934128320233216,0.946515615131523,0.959070107846485,0.972011318875494,0.985172591974370,0.998535103722132,1.01203113052258,1.02553161487103,1.03915041634374,1.05293359197086,1.06705513133124,1.08171693818342,1.09682757662003,1.11244774257271,1.12870424032411,1.14553396416153,1.16266138189230,1.17979210256727,1.19670213120278,1.21353376813396,1.23048167835095,1.24750814828215,1.26475303685492,1.28232835589073,1.30018768025277,1.31857915790208,1.33744365752917,1.35659515619557,1.37625444633662,1.39656415957941,1.41756108924116,1.43921269483602,1.46138516461118,1.48428978922818,1.50804750100951,1.53253199373831,1.55754598961699,1.58296287685290,1.60859445236472,1.63448585025111,1.66092667301402,1.68825082187160,1.71695507898012,1.74683158520089,1.77824977707033,1.81172533872696,1.84803194509893,1.88773309842180,1.93137316210990,1.97941884062180,2.03232266097504,2.09062279962536,2.15507011678436,2.22659027795234,2.29811043912033])
# eiG=np.array([-4.58549444481861,-4.41905169997168,-4.25260895512475,-4.08662396558816,-3.92207842101343,-3.76064615345896,-3.60474508307372,-3.45575889003389,-3.31556377744572,-3.18559091287341,-3.06673126326088,-2.95823116379199,-2.85843245530649,-2.76559112933041,-2.67861614555051,-2.59680738849205,-2.52031070788976,-2.44917480822650,-2.38311965157969,-2.32152393161710,-2.26357560612566,-2.20834816217566,-2.15564783378201,-2.10513144977297,-2.05641856467625,-2.00841008097693,-1.96093990667483,-1.91440051291705,-1.86921327208338,-1.82554771243286,-1.78353113660922,-1.74352417577737,-1.70573649092103,-1.67037125160163,-1.63725574612536,-1.60578956183697,-1.57573240829567,-1.54680203304924,-1.51864151669789,-1.49107472217809,-1.46395495112886,-1.43742805856803,-1.41151377051444,-1.38573085659581,-1.35980920436505,-1.33360724318068,-1.30713864037333,-1.28054393349777,-1.25411485060132,-1.22800902142870,-1.20253275963330,-1.17774616902074,-1.15353563212340,-1.12980213716702,-1.10674447903740,-1.08445146019819,-1.06291009150190,-1.04211281332251,-1.02193405808463,-1.00235673607102,-0.983354912749689,-0.964770221242508,-0.946590844225941,-0.928568366671359,-0.910478928795640,-0.892277399186906,-0.873949685864979,-0.855401854362638,-0.836659566740487,-0.818018420712407,-0.799896541683582,-0.782574034286588,-0.765978185472504,-0.750020613807603,-0.734440149446239,-0.719127211600532,-0.704120234099712,-0.689342757360036,-0.674599334795821,-0.659812335851499,-0.644922626750132,-0.629795360600445,-0.614276302741743,-0.598217831688222,-0.581544682645552,-0.564388280915709,-0.546970985162501,-0.529549485752722,-0.512240398732629,-0.495166886045680,-0.478534283115238,-0.462464353482151,-0.447083017931075,-0.432448201892941,-0.418548975182346,-0.405321512517352,-0.392703211761705,-0.380535270435646,-0.368589134178067,-0.356821550815626,-0.345117331935989,-0.333377753739671,-0.321495842191013,-0.309663971836662,-0.297911373690107,-0.286153797873995,-0.274318444471981,-0.262264404416987,-0.249873310298644,-0.237200631494959,-0.224222089959716,-0.210985056693598,-0.197636205246334,-0.184320050355800,-0.171094029621544,-0.158027516360425,-0.145141632508446,-0.132450932752202,-0.119997377924594,-0.107829608240517,-0.0958682637043045,-0.0840202819521096,-0.0722329720799401,-0.0604403735871543,-0.0486455804542291,-0.0367697582809518,-0.0246822736934866,-0.0124380608810234,-3.64886759982738e-11,0.0126900719746841,0.0256613293275777,0.0390202225061893,0.0527645498864436,0.0668977215462731,0.0813457475704667,0.0960409915751991,0.110879308363000,0.125770790047916,0.140643081936431,0.155261835036102,0.169436985096899,0.183101271477721,0.196312238975127,0.209176479442232,0.221850032739251,0.234495853684771,0.247285426449562,0.260247077851709,0.273373317832687,0.286453093894898,0.299256578308755,0.311673982923707,0.323524167525530,0.334843076916834,0.345717824776902,0.356240196665919,0.366521106272841,0.376689759036519,0.386848391289294,0.397118926580712,0.407465187463887,0.417853763214117,0.428299565818402,0.438823826900700,0.449362951072049,0.459822983507189,0.470096238639496,0.480131630741982,0.489981483343020,0.499778697307582,0.509604136691987,0.519555798691301,0.529716499569676,0.540153131273157,0.550882037193912,0.562008442218062,0.573582329702983,0.585642699712872,0.598226836978267,0.611181645147257,0.624410051882623,0.637781163756776,0.651165933632021,0.664454595115281,0.677661292903294,0.690873441685611,0.704179269470594,0.717747402706968,0.731736120473539,0.746131620404815,0.761010942067911,0.776347687066023,0.792240804525905,0.808762150955895,0.826007299082784,0.843810579182656,0.861860981784607,0.879791699684174,0.897400691754507,0.914616630576811,0.931308712953772,0.947415027622997,0.963026271135231,0.978204692923153,0.993142543043890,1.00798096320357,1.02281086302925,1.03728506177650,1.05112690930909,1.06419138027794,1.07649308862178,1.08822836075791,1.09961359074224,1.11081621711921,1.12214193659025,1.13377808332895,1.14576582905238,1.15819668275315,1.17117313024522,1.18463693847227,1.19866656015758,1.21329617921308,1.22863177033701,1.24469309219625,1.26135277566703,1.27851662812383,1.29604516409978,1.31379764532230,1.33193058733982,1.35061303251297,1.37022042731291,1.39087037601265,1.41288642103192,1.43649854368510,1.46178636632054,1.48869628803991,1.51731070602920,1.54772220861908,1.57969098875069,1.61266580133855,1.64597478373594,1.67899116304711,1.71141085651047,1.74318566547062,1.77400943370751,1.80451458881717,1.83556375034022,1.86858235279070,1.90465613265905,1.94473109169419,1.98995324136692,2.04194016010292,2.10220919967099,2.17230039679688,2.25356270671382,2.33482501663076])
# eiB=np.array([-4.63875727551674,-4.47273969840982,-4.30672212130290,-4.14102626640335,-3.97677683630890,-3.81598577463655,-3.66138343419585,-3.51486956878498,-3.37823924488415,-3.25177867244744,-3.13547797524310,-3.02942778797841,-2.93289777170581,-2.84387921746383,-2.76020094296197,-2.68033408517374,-2.60286189232823,-2.52706733442858,-2.45258641227888,-2.38031220644166,-2.31182859918253,-2.24845886519786,-2.19002825117638,-2.13635226251331,-2.08654292987607,-2.03982829813505,-1.99521743378036,-1.95174782633746,-1.90838050806153,-1.86500695757048,-1.82137168506778,-1.77765990886985,-1.73476422327226,-1.69333984902309,-1.65372401575398,-1.61593429693653,-1.58022220477488,-1.54664245381865,-1.51534343887776,-1.48628080597851,-1.45933292179227,-1.43453826338471,-1.41166919504053,-1.39008920667711,-1.36888099205289,-1.34754391193076,-1.32581153402010,-1.30355413396945,-1.28071301017248,-1.25717656777272,-1.23292716203317,-1.20833165391002,-1.18386335359856,-1.15979338266865,-1.13621249722052,-1.11307921913403,-1.09037199343919,-1.06808710446180,-1.04604499014315,-1.02435235100672,-1.00309262320148,-0.982241894779615,-0.961639800036018,-0.940907237796334,-0.919854541736634,-0.898516222911243,-0.877227621022308,-0.856376550894512,-0.836270103026064,-0.817112216022540,-0.798860156514877,-0.781632526282380,-0.765361329892407,-0.750049365897389,-0.735637810257113,-0.721990429408937,-0.708851056905438,-0.696010390050648,-0.683303363639351,-0.670675747778901,-0.657914459978309,-0.644994003109380,-0.631781534916429,-0.618190456752954,-0.604262242425241,-0.590157447897848,-0.576085563717482,-0.562215671260275,-0.548493282563189,-0.534906837679687,-0.521476120270507,-0.508293668519496,-0.495332428811731,-0.482505466579507,-0.469649211690800,-0.456503781915594,-0.443007675337170,-0.429067517512271,-0.414631214039565,-0.399669637097612,-0.384171007480823,-0.368301330401476,-0.352199359910180,-0.335998072638798,-0.319810502020462,-0.303615457658485,-0.287419382935192,-0.271320721608308,-0.255411154544086,-0.239733624422460,-0.224301258963880,-0.209084364185537,-0.194141575951555,-0.179568086459137,-0.165351489666424,-0.151459561063015,-0.137861345222109,-0.124508795556657,-0.111405455097204,-0.0986277506425138,-0.0861854091322620,-0.0741065759899937,-0.0624873206271060,-0.0512946570066192,-0.0404472100140417,-0.0299174938465561,-0.0196906857286863,-0.00973053327846733,-8.34630413702894e-11,0.00956920924654337,0.0190369318861357,0.0285412994855622,0.0382219539300294,0.0482029116747916,0.0584555695450812,0.0689269515666214,0.0796624192067305,0.0907148413290182,0.102113868083557,0.113788200897825,0.125659851616847,0.137633904364593,0.149786579551368,0.161937644463328,0.173952196788183,0.185905416987991,0.197893073013793,0.209901626287816,0.222033609830756,0.234369853510493,0.247099193050210,0.260366592597517,0.274241067231512,0.288536754355984,0.303022547540206,0.317667961492160,0.332359702628702,0.347072540266089,0.361765278420627,0.376412937159217,0.391130596893441,0.405894617745650,0.420661880327516,0.435468739794551,0.450264201032076,0.465008938143185,0.479557411801422,0.493956823264545,0.508245627967508,0.522593901614356,0.537077565794986,0.551790544500509,0.566562136485780,0.581074424804670,0.595067167024197,0.608418640318928,0.621031334258408,0.632765991072080,0.643551161505524,0.653406024393288,0.662551425251041,0.671148094709288,0.679667754244033,0.688318564270425,0.697170926637360,0.706144973576105,0.715125950741511,0.724097217517963,0.733099215786028,0.742249250879691,0.751761551577840,0.761847316482699,0.772737480001257,0.784393153365557,0.796757652087340,0.809985102812879,0.823983375650233,0.838667226015722,0.853879394063881,0.869592987033523,0.885653697512689,0.901947185560422,0.918492952838840,0.935144140223451,0.951935830438352,0.968988732770624,0.986534875074927,1.00434635990561,1.02234883915494,1.04043073223354,1.05855009270323,1.07674224840825,1.09504898242028,1.11344339208435,1.13182728017392,1.15007058818751,1.16797964144121,1.18531187743372,1.20207998733585,1.21839292057407,1.23444152448781,1.25023612768834,1.26565758919867,1.28071435523244,1.29544896726883,1.30972899769172,1.32325104888349,1.33623928923579,1.34919078311841,1.36219801636622,1.37548883549779,1.38950747763918,1.40461834520782,1.42107235365846,1.43905254333226,1.45894059852162,1.48068666826625,1.50398054126791,1.52880005089023,1.55554325830089,1.58473176147585,1.61668182301357,1.65093278269831,1.68704594765212,1.72477542631378,1.76408917262805,1.80515774130885,1.84832683475973,1.89404380288184,1.94265982074026,1.99492994579212,2.05173311826641,2.11344049486426,2.17972697835004,2.24610522310279,2.31248346785553])


data = scipy.io.loadmat('crf.mat')
CRF = np.array(data['crf'], dtype='float32')
# print(CRF.shape)

eiR = CRF[:,0]
eiG = CRF[:,1]
eiB = CRF[:,2]


ss=0
kk=1

tckpeR = inter.splrep(pvRGB, eiR, s=ss, k=kk)
tckpeG = inter.splrep(pvRGB, eiG, s=ss, k=kk)
tckpeB = inter.splrep(pvRGB, eiB, s=ss, k=kk)

tckepR = inter.splrep(eiR, pvRGB, s=ss, k=kk)
tckepG = inter.splrep(eiG, pvRGB, s=ss, k=kk)
tckepB = inter.splrep(eiB, pvRGB, s=ss, k=kk)

spl_ext=3
spl_dext=1

# spl_ext=0
# spl_dext=0
# 边界值导数为0是否会导致发散
# RGB的扩写
# 如何用一个函数来搞定RGB
# backward部分加速
# cnn更新

class pv2eiRfcn(Function):
    @staticmethod
    def forward(ctx, input):
        ctx.save_for_backward(input) # 将Tensor转变为Variable保存到ctx中
        pv=pvRGB
        ei=eiR # 根据通道类型修改
        # tck = inter.splrep(pv, ei, s=ss, k=kk)
        img_p=input.detach().numpy()
        img_ei = inter.splev(img_p, tckpeR, der =0, ext = spl_ext)
        output = torch.Tensor(img_ei)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        # grad_output为反向传播上一级计算得到的梯度值
        input = ctx.saved_variables
        # input = input_src.clone()
        grad_input = None
        pv=pvRGB
        ei=eiR # 根据通道类型修改
        # tck = inter.splrep(pv, ei, s=ss, k=kk)
        # img_p=input.detach().numpy()
        img_p = input[0].detach().numpy()
        img_ei_d = inter.splev(img_p, tckpeR, der =1, ext = spl_dext)
        grad_input = torch.Tensor(img_ei_d) * grad_output
        return grad_input

class ei2pvRfcn(Function):
    @staticmethod
    def forward(ctx, input):
        ctx.save_for_backward(input) # 将Tensor转变为Variable保存到ctx中
        pv=pvRGB
        ei=eiR # 根据通道类型修改
        # tck = inter.splrep(ei, pv, s=0)
        img_ei=input.detach().numpy()
        img_pv = inter.splev(img_ei, tckepR, der =0, ext = spl_ext)
        output = torch.Tensor(img_pv)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        # grad_output为反向传播上一级计算得到的梯度值
        input = ctx.saved_variables
        # input = input_src.clone()
        grad_input = None
        pv=pvRGB
        ei=eiR # 根据通道类型修改
        # tck = inter.splrep(ei, pv, s=0)
        img_ei=input[0].detach().numpy()
        img_pv_d = inter.splev(img_ei, tckepR, der =1, ext = spl_dext)
        grad_input = torch.Tensor(img_pv_d) * grad_output
        # grad_input[grad_input==0] = 0.00001
        return grad_input

class pv2eiGfcn(Function):
    @staticmethod
    def forward(ctx, input):
        ctx.save_for_backward(input) # 将Tensor转变为Variable保存到ctx中
        pv=pvRGB
        ei=eiG # 根据通道类型修改
        # tck = inter.splrep(pv, ei, s=ss, k=kk)
        img_p=input.detach().numpy()
        img_ei = inter.splev(img_p, tckpeG, der =0, ext = spl_ext)
        output = torch.Tensor(img_ei)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        # grad_output为反向传播上一级计算得到的梯度值
        input = ctx.saved_variables
        # input = input_src.clone()
        grad_input = None
        pv=pvRGB
        ei=eiG # 根据通道类型修改
        # tck = inter.splrep(pv, ei, s=ss, k=kk)
        # img_p=input.detach().numpy()
        img_p = input[0].detach().numpy()
        img_ei_d = inter.splev(img_p, tckpeG, der =1, ext = spl_dext)
        grad_input = torch.Tensor(img_ei_d) * grad_output
        # grad_input[grad_input == 0] = 0.00001
        return grad_input

class ei2pvGfcn(Function):
    @staticmethod
    def forward(ctx, input):
        ctx.save_for_backward(input) # 将Tensor转变为Variable保存到ctx中
        pv=pvRGB
        ei=eiG # 根据通道类型修改
        # tck = inter.splrep(ei, pv, s=0)
        img_ei=input.detach().numpy()
        img_pv = inter.splev(img_ei, tckepG, der =0, ext = spl_ext)
        output = torch.Tensor(img_pv)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        # grad_output为反向传播上一级计算得到的梯度值
        input = ctx.saved_variables
        # input = input_src.clone()
        grad_input = None
        pv=pvRGB
        ei=eiG # 根据通道类型修改
        # tck = inter.splrep(ei, pv, s=0)
        img_ei=input[0].detach().numpy()
        img_pv_d = inter.splev(img_ei, tckepG, der =1, ext = spl_dext)
        grad_input = torch.Tensor(img_pv_d) * grad_output
        # grad_input[grad_input == 0] = 0.00001
        return grad_input

class pv2eiBfcn(Function):
    @staticmethod
    def forward(ctx, input):
        ctx.save_for_backward(input) # 将Tensor转变为Variable保存到ctx中
        pv=pvRGB
        ei=eiB # 根据通道类型修改
        # tck = inter.splrep(pv, ei, s=ss, k=kk)
        img_p=input.detach().numpy()
        img_ei = inter.splev(img_p, tckpeB, der =0, ext = spl_ext)
        output = torch.Tensor(img_ei)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        # grad_output为反向传播上一级计算得到的梯度值
        input = ctx.saved_variables
        # input = input_src.clone()
        grad_input = None
        pv=pvRGB
        ei=eiB # 根据通道类型修改
        # tck = inter.splrep(pv, ei, s=ss, k=kk)
        # img_p=input.detach().numpy()
        img_p = input[0].detach().numpy()
        img_ei_d = inter.splev(img_p, tckpeB, der =1, ext = spl_dext)
        grad_input = torch.Tensor(img_ei_d) * grad_output
        # grad_input[grad_input == 0] = 0.00001
        return grad_input

class ei2pvBfcn(Function):
    @staticmethod
    def forward(ctx, input):
        ctx.save_for_backward(input) # 将Tensor转变为Variable保存到ctx中
        pv=pvRGB
        ei=eiB # 根据通道类型修改
        # tck = inter.splrep(ei, pv, s=0)
        img_ei=input.detach().numpy()
        img_pv = inter.splev(img_ei, tckepB, der =0, ext = spl_ext)
        output = torch.Tensor(img_pv)
        return output

    @staticmethod
    def backward(ctx, grad_output):
        # grad_output为反向传播上一级计算得到的梯度值
        input = ctx.saved_variables
        # input = input_src.clone()
        grad_input = None
        pv=pvRGB
        ei=eiB # 根据通道类型修改
        # tck = inter.splrep(ei, pv, s=0)
        img_ei=input[0].detach().numpy()
        img_pv_d = inter.splev(img_ei, tckepB, der =1, ext = spl_dext)
        grad_input = torch.Tensor(img_pv_d) * grad_output
        # grad_input[grad_input == 0] = 0.00001
        return grad_input

class imfR(torch.nn.Module):
    def __init__(self):
        super(imfR, self).__init__()
    def forward(self, input):
        return IMFR.apply(input)

class imfG(torch.nn.Module):
    def __init__(self):
        super(imfG, self).__init__()
    def forward(self, input):
        return IMFG.apply(input)

class imfB(torch.nn.Module):
    def __init__(self):
        super(imfB, self).__init__()
    def forward(self, input):
        return IMFB.apply(input)

class pv2eiR(torch.nn.Module):
    def __init__(self):
        super(pv2eiR, self).__init__()
    def forward(self, input):
        return pv2eiRfcn.apply(input)

class ei2pvR(torch.nn.Module):
    def __init__(self):
        super(ei2pvR, self).__init__()
    def forward(self, input):
        return ei2pvRfcn.apply(input)

class pv2eiG(torch.nn.Module):
    def __init__(self):
        super(pv2eiG, self).__init__()
    def forward(self, input):
        return pv2eiGfcn.apply(input)

class ei2pvG(torch.nn.Module):
    def __init__(self):
        super(ei2pvG, self).__init__()
    def forward(self, input):
        return ei2pvGfcn.apply(input)

class pv2eiB(torch.nn.Module):
    def __init__(self):
        super(pv2eiB, self).__init__()
    def forward(self, input):
        return pv2eiBfcn.apply(input)

class ei2pvB(torch.nn.Module):
    def __init__(self):
        super(ei2pvB, self).__init__()
    def forward(self, input):
        return ei2pvBfcn.apply(input)

class changeR(torch.nn.Module):
    def __init__(self,k):
        super(changeR, self).__init__()
        self.pv2ei = pv2eiR() # 根据通道修改
        self.ei2pv = ei2pvR() # 根据通道修改
        self.timerate = torch.FloatTensor([k])
    def forward(self, input):
        ei = self.pv2ei(input)
        ei = ei + torch.log(self.timerate)
        pv = self.ei2pv(ei)
        return pv

class changeG(torch.nn.Module):
    def __init__(self,k):
        super(changeG, self).__init__()
        self.pv2ei = pv2eiG() # 根据通道修改
        self.ei2pv = ei2pvG() # 根据通道修改
        self.timerate = torch.FloatTensor([k])
    def forward(self, input):
        ei = self.pv2ei(input)
        ei = ei + torch.log(self.timerate)
        pv = self.ei2pv(ei)
        return pv

class changeB(torch.nn.Module):
    def __init__(self,k):
        super(changeB, self).__init__()
        self.pv2ei = pv2eiB() # 根据通道修改
        self.ei2pv = ei2pvB() # 根据通道修改
        self.timerate = torch.FloatTensor([k])
    def forward(self, input):
        ei = self.pv2ei(input)
        ei = ei + torch.log(self.timerate)
        pv = self.ei2pv(ei)
        return pv

class upIMF(torch.nn.Module):
    def __init__(self,ev):
        super(upIMF, self).__init__()
        k = 2 ** ev
        self.changeB = changeR(k)
        self.changeG = changeG(k)
        self.changeR = changeB(k)

    def forward(self, input_src):
        input_src = input_src.cpu()
        input = input_src.clone()
        image = input.clone()
        image[:, 0, :, :] = self.changeB(input[:, 0, :, :])
        image[:, 1, :, :] = self.changeG(input[:, 1, :, :])
        image[:, 2, :, :] = self.changeR(input[:, 2, :, :])
        return image

class downIMF(torch.nn.Module):
    def __init__(self,ev):
        super(downIMF, self).__init__()
        k = 1/(2 ** ev)
        self.changeB = changeR(k)
        self.changeG = changeG(k)
        self.changeR = changeB(k)

    def forward(self, input_src):
        input_src = input_src.cpu()
        input = input_src.clone()
        image = input.clone()
        image[:, 0, :, :] = self.changeB(input[:, 0, :, :])
        image[:, 1, :, :] = self.changeG(input[:, 1, :, :])
        image[:, 2, :, :] = self.changeR(input[:, 2, :, :])
        return image